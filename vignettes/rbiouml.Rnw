%\VignetteIndexEntry{Getting started with rbiouml}
%\VignetteKeywords{BioUML}
\documentclass[12pt]{article}
\usepackage{amsmath}
\usepackage{hyperref}
\usepackage[authoryear,round]{natbib}

\textwidth=6.2in
\textheight=8.5in
\oddsidemargin=.1in
\evensidemargin=.1in
\headheight=-.3in

\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textit{#1}}}

\author{Ivan Yevshin and Tagir Valeev}

\begin{document}
\title{Description of rbiouml package}

\maketitle
\tableofcontents
\section{Introduction}
The \Rpackage{rbiouml} package provides functions to interact with BioUML server from within R.
BioUML is an open source integrated Java platform for analysis of data from omics sciences research and other advanced computational biology,
for building the virtual cell and the virtual physiological human.
It spans a comprehensive range of capabilities, including access to databases with experimental data,
tools for formalized description of biological systems structure and functioning, as well as tools for their visualization, simulation, parameters fitting and analyses.
\section{Getting started}
\subsection{Connecting to BioUML server}
The first thing you need to do is load the package and login to the BioUML server.
As an example we will connect to the free public BioUML server at \url{http://ie.biouml.org}. 
The function \Rfunction{biouml.login} connects to BioUML server and perform authentication.
<<>>=
library(rbiouml)
biouml.login("ie.biouml.org")
@
The \Rfunction{biouml.login} also accepts user and password, but we leave them empty in the example above for anonymous login.
Alternatively you can install BioUML on your local computer and connect to it in the same way.
\begin{Sinput}
> biouml.login("localhost:8080")
\end{Sinput}
See \url{http://wiki.biouml.org/index.php/BioUML\_server\_installation} for details on BioUML server installation.

\subsection{Querying BioUML repository}
The BioUML repository (or simply repository) is the central BioUML data storage place.
Basically, all the data you work with in BioUML is stored in the repository.
The repository has a hierarchical structure similar to file systems.
On the top level the repository consists of several root folders.
The most common ones are:
\begin{description}
\item[databases] contains preinstalled or user-defined modules.
\item[data] contains user projects and public examples. 
\end{description}
The \Rfunction{biouml.ls} function lists the contents of given folder in repository.
The list of databases available in BioUML server:
<<>>=
biouml.ls("databases")
@
The list of data elements available in BioUML examples folder:
<<>>=
biouml.ls("data/Examples/Optimization/Data/Experiments")
@

The \Rfunction{biouml.get} fetches a table from BioUML repository as R data.frame:
<<>>=
x <- biouml.get("data/Examples/Optimization/Data/Experiments/exp_data_1")
class(x)
head(x)
@

This function allows to fetch not only true BioUML tables, but any data elements which have tabular
representation, including profiles, user uploaded tracks and so on.

To store data.frame as a table into BioUML repository use \Rfunction{biouml.put} function:
<<>>=
x[,5] <- x[,3] + x[,4]
biouml.put("data/Collaboration/Demo/Data/Rtest/exp_data_1_sum", x)
biouml.ls("data/Collaboration/Demo/Data/Rtest")
@

\subsection{Using BioUML analyses}
BioUML provides a set of analyses organized in groups.
The list of analyses available in the current server can be fetched with \Rfunction{biouml.analysis.list} function.
<<>>=
summary( biouml.analysis.list() )
@
Each biouml analysis has a set of parameters, \Rfunction{biouml.analysis.parameters} returns
a data.frame with row names corresponding to parameter names and one column 'description'.
<<>>=
biouml.analysis.parameters("Filter table")
@
The \Rfunction{biouml.analysis} launches analysis with given parameters.
<<>>=
biouml.analysis("Filter table", list(
  inputPath="data/Examples/Optimization/Data/Experiments/exp_data_1",
  filterExpression="time < 40",
  outputPath="data/Collaboration/Demo/Data/Rtest/exp_data_1 filtered"
))
@
%\subsection{Using BioUML workflows}
\subsection{Importing files to and from BioUML}
As described previously, data.frames can be fetched from and stored to BioUML repository using \Rfunction{biouml.get} and \Rfunction{biouml.put} functions.
In addition, data can be imported from files and exported to files in various formats.
The list of importers can be obtained with \Rfunction{biouml.importers} function.
<<>>=
head( biouml.importers() )
@
As an example we will import fasta file to BioUML.
<<>>=
hiv.genome <- system.file("extdata","HIV-1.fa", package="rbiouml")
output.folder <- "data/Collaboration/Demo/Data/Rtest"
biouml.import(hiv.genome, output.folder,  importer="Fasta format (*.fasta)")
biouml.ls(output.folder)
@

Similarly, we can use \Rfunction{biouml.export*} functions to export data from BioUML repository.
<<>>=
head( biouml.exporters() )
biouml.export("data/Collaboration/Demo/Data/Rtest/HIV-1",
  exporter="Fasta format (*.fasta)", target.file="HIV-1.fa")
file.exists("HIV-1.fa")
@

\subsection{Disconnecting from BioUML server}
When you have finished with the BioUML server is recommended to do logout.
<<>>=
biouml.logout()
@

\end{document}
